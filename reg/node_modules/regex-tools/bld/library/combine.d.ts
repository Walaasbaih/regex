/*!
 * Regular Expression Tools
 * https://github.com/vilic/regex-tools
 */
import { Dict } from 'tslang';
export declare type Lookahead = boolean | '=' | '!';
export interface NestedRegexOptions {
    name?: string;
    or?: boolean;
    capture?: boolean;
    lookahead?: Lookahead;
    repeat?: string;
    regexes: Regexes;
}
export interface NestedRegexArray extends Array<Regexes> {
}
export declare type NestedRegexes = NestedRegexArray | NestedRegexOptions;
export declare type Regexes = RegExp | NestedRegexes;
export declare class CombinedResult {
    combined: string;
    groupNames: string[];
    groupNameToIndex: Dict<number>;
    groupNameHideMap: Dict<void>;
    constructor(combined: string, groupNames: string[], groupNameToIndex: Dict<number>, groupNameHideMap: Dict<void>);
    getRegexLiteral(flags?: string): string;
    getParametersSnippet({ typed, matchName, separator, }: {
        typed?: boolean | undefined;
        matchName?: string | undefined;
        separator?: string | undefined;
    }): string;
    getGroupAliasDeclarationsSnippet({ arrayName, useLet, newLine, lineIndent, matchName, }?: {
        arrayName?: string | undefined;
        useLet?: boolean | undefined;
        newLine?: string | undefined;
        lineIndent?: string | undefined;
        matchName?: string | undefined;
    }): string;
    getEnumDeclaration({ useConst, name, newLine, lineIndent, indent, }?: {
        useConst?: boolean | undefined;
        name?: string | undefined;
        newLine?: string | undefined;
        lineIndent?: string | undefined;
        indent?: string | undefined;
    }): string;
}
export declare function combine(regexes: NestedRegexes): CombinedResult;
//# sourceMappingURL=combine.d.ts.map